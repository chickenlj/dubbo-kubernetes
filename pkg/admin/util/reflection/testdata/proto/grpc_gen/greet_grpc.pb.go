// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: greet.proto

package grpc_gen

import (
	context "context"
)

import (
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

import (
	greet "github.com/apache/dubbo-kubernetes/pkg/admin/util/reflection/testdata/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetService_Greet_FullMethodName             = "/greet.GreetService/Greet"
	GreetService_GreetStream_FullMethodName       = "/greet.GreetService/GreetStream"
	GreetService_GreetClientStream_FullMethodName = "/greet.GreetService/GreetClientStream"
	GreetService_GreetServerStream_FullMethodName = "/greet.GreetService/GreetServerStream"
)

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	Greet(ctx context.Context, in *greet.GreetRequest, opts ...grpc.CallOption) (*greet.GreetResponse, error)
	GreetStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetStreamClient, error)
	GreetClientStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetClientStreamClient, error)
	GreetServerStream(ctx context.Context, in *greet.GreetServerStreamRequest, opts ...grpc.CallOption) (GreetService_GreetServerStreamClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Greet(ctx context.Context, in *greet.GreetRequest, opts ...grpc.CallOption) (*greet.GreetResponse, error) {
	out := new(greet.GreetResponse)
	err := c.cc.Invoke(ctx, GreetService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], GreetService_GreetStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetStreamClient{stream}
	return x, nil
}

type GreetService_GreetStreamClient interface {
	Send(*greet.GreetStreamRequest) error
	Recv() (*greet.GreetStreamResponse, error)
	grpc.ClientStream
}

type greetServiceGreetStreamClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetStreamClient) Send(m *greet.GreetStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetStreamClient) Recv() (*greet.GreetStreamResponse, error) {
	m := new(greet.GreetStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetClientStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], GreetService_GreetClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetClientStreamClient{stream}
	return x, nil
}

type GreetService_GreetClientStreamClient interface {
	Send(*greet.GreetClientStreamRequest) error
	CloseAndRecv() (*greet.GreetClientStreamResponse, error)
	grpc.ClientStream
}

type greetServiceGreetClientStreamClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetClientStreamClient) Send(m *greet.GreetClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetClientStreamClient) CloseAndRecv() (*greet.GreetClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(greet.GreetClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetServerStream(ctx context.Context, in *greet.GreetServerStreamRequest, opts ...grpc.CallOption) (GreetService_GreetServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], GreetService_GreetServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetServerStreamClient interface {
	Recv() (*greet.GreetServerStreamResponse, error)
	grpc.ClientStream
}

type greetServiceGreetServerStreamClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetServerStreamClient) Recv() (*greet.GreetServerStreamResponse, error) {
	m := new(greet.GreetServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	Greet(context.Context, *greet.GreetRequest) (*greet.GreetResponse, error)
	GreetStream(GreetService_GreetStreamServer) error
	GreetClientStream(GreetService_GreetClientStreamServer) error
	GreetServerStream(*greet.GreetServerStreamRequest, GreetService_GreetServerStreamServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) Greet(context.Context, *greet.GreetRequest) (*greet.GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetServiceServer) GreetStream(GreetService_GreetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetStream not implemented")
}
func (UnimplementedGreetServiceServer) GreetClientStream(GreetService_GreetClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetClientStream not implemented")
}
func (UnimplementedGreetServiceServer) GreetServerStream(*greet.GreetServerStreamRequest, GreetService_GreetServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetServerStream not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(greet.GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Greet(ctx, req.(*greet.GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetStream(&greetServiceGreetStreamServer{stream})
}

type GreetService_GreetStreamServer interface {
	Send(*greet.GreetStreamResponse) error
	Recv() (*greet.GreetStreamRequest, error)
	grpc.ServerStream
}

type greetServiceGreetStreamServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetStreamServer) Send(m *greet.GreetStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetStreamServer) Recv() (*greet.GreetStreamRequest, error) {
	m := new(greet.GreetStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetClientStream(&greetServiceGreetClientStreamServer{stream})
}

type GreetService_GreetClientStreamServer interface {
	SendAndClose(*greet.GreetClientStreamResponse) error
	Recv() (*greet.GreetClientStreamRequest, error)
	grpc.ServerStream
}

type greetServiceGreetClientStreamServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetClientStreamServer) SendAndClose(m *greet.GreetClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetClientStreamServer) Recv() (*greet.GreetClientStreamRequest, error) {
	m := new(greet.GreetClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(greet.GreetServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetServerStream(m, &greetServiceGreetServerStreamServer{stream})
}

type GreetService_GreetServerStreamServer interface {
	Send(*greet.GreetServerStreamResponse) error
	grpc.ServerStream
}

type greetServiceGreetServerStreamServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetServerStreamServer) Send(m *greet.GreetServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetStream",
			Handler:       _GreetService_GreetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetClientStream",
			Handler:       _GreetService_GreetClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetServerStream",
			Handler:       _GreetService_GreetServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greet.proto",
}
